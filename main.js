// Generated by CoffeeScript 1.4.0
(function() {
  var Canvas, Checkbox, DistSim, Emitter, Figure, IntroSim, Oscillator, Particle, Scope, Tracker, Vector, WebFontConfig, char, cos, d3Object, distSim, f, introSim, min, ode, pi, repRow, rk, sin, vfPoint, xMax, yMax, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Number.prototype.pow = function(p) {
    return Math.pow(this, p);
  };

  WebFontConfig = {
    google: {
      families: ["Reenie+Beanie::latin"]
    }
  };

  pi = Math.PI;

  sin = Math.sin;

  cos = Math.cos;

  min = Math.min;

  repRow = function(val, m) {
    var _i, _results;
    _results = [];
    for (_i = 1; 1 <= m ? _i <= m : _i >= m; 1 <= m ? _i++ : _i--) {
      _results.push(val);
    }
    return _results;
  };

  xMax = 4;

  yMax = 4;

  _ref = $blab.ode, rk = _ref.rk, ode = _ref.ode;

  char = function(id, code) {
    return $("." + id).html("&" + code + ";");
  };

  char("deg", "deg");

  char("percent", "#37");

  char("equals", "#61");

  f = function(t, v, mu) {
    return [v[1], mu * (1 - v[0] * v[0]) * v[1] - v[0]];
  };

  Vector = (function() {
    var z;

    z = function() {
      return new Vector;
    };

    function Vector(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    Vector.prototype.add = function(v) {
      if (v == null) {
        v = z();
      }
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vector.prototype.mag = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.ang = function() {
      return Math.atan2(this.y, this.x);
    };

    Vector.prototype.polar = function(m, a) {
      this.x = m * Math.cos(a);
      this.y = m * Math.sin(a);
      return this;
    };

    return Vector;

  })();

  Figure = (function() {

    function Figure() {}

    Figure.margin = {
      top: 65,
      right: 65,
      bottom: 65,
      left: 65
    };

    Figure.width = 450 - Figure.margin.left - Figure.margin.top;

    Figure.height = 450 - Figure.margin.left - Figure.margin.top;

    return Figure;

  })();

  Canvas = (function() {

    function Canvas() {}

    Canvas.margin = {
      left: 65,
      top: 65
    };

    Canvas.width = Figure.width;

    Canvas.height = Figure.height;

    Canvas.canvas = $("#vector-field");

    Canvas.canvas.css("left", "" + Canvas.margin.left + "px").css("top", "" + Canvas.margin.top + "px");

    Canvas.canvas[0].width = Canvas.width;

    Canvas.canvas[0].height = Canvas.height;

    Canvas.ctx = Canvas.canvas[0].getContext('2d');

    Canvas.clear = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    Canvas.square = function(pos, size, color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(pos.x, pos.y, size, size);
    };

    return Canvas;

  })();

  vfPoint = (function() {
    var height, width;

    width = Figure.width;

    height = Figure.height;

    function vfPoint(pos, mu) {
      this.pos = pos != null ? pos : {
        x: 0,
        y: 0
      };
      this.mu = mu != null ? mu : 1;
      this.vel = new Vector(0, 0);
      this.vf = new Vector(0, 0);
      this.d = 0;
      this.scales();
      this.update();
      this.draw();
    }

    vfPoint.prototype.scales = function() {
      this.x = d3.scale.linear().domain([-xMax, xMax]).range([0, width]);
      return this.y = d3.scale.linear().domain([-yMax, yMax]).range([height, 0]);
    };

    vfPoint.prototype.update = function() {
      var vel;
      this.vf.x = this.x.invert(this.pos.x);
      this.vf.y = this.y.invert(this.pos.y);
      vel = f(0, [this.vf.x, this.vf.y], this.mu);
      this.vel.x = this.x.invert(vel[0]);
      return this.vel.y = this.y.invert(vel[1]);
    };

    vfPoint.prototype.draw = function() {};

    vfPoint.prototype.move = function() {
      var w;
      this.update();
      w = ode(rk[1], f, [0, 0.02], [this.vf.x, this.vf.y], this.mu)[1];
      this.pos.x = this.x(w[0]);
      this.pos.y = this.y(w[1]);
      return this.d += this.vel.mag();
    };

    vfPoint.prototype.visible = function() {
      var _ref1, _ref2;
      return ((0 <= (_ref1 = this.pos.x) && _ref1 <= width)) && ((0 <= (_ref2 = this.pos.y) && _ref2 <= height)) && this.vel.mag() > 0 && this.d < 1200;
    };

    return vfPoint;

  })();

  Particle = (function(_super) {

    __extends(Particle, _super);

    function Particle(Z, mu) {
      Particle.__super__.constructor.call(this, Z, mu);
      this.size = 2;
      this.color = ["red", "green", "blue"][Math.floor(3 * Math.random())];
    }

    Particle.prototype.draw = function() {
      return Canvas.square(this.pos, this.size, this.color);
    };

    return Particle;

  })(vfPoint);

  Emitter = (function() {

    Emitter.prototype.maxParticles = 500;

    Emitter.prototype.rate = 3;

    Emitter.prototype.ch = Figure.height;

    Emitter.prototype.cw = Figure.width;

    function Emitter(mu) {
      this.mu = mu != null ? mu : 1;
      this.particles = [];
    }

    Emitter.prototype.directParticles = function() {
      var particle, _i, _j, _len, _ref1, _ref2, _results,
        _this = this;
      if (!(this.particles.length > this.maxParticles)) {
        for (_i = 1, _ref1 = this.rate; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 1 <= _ref1 ? _i++ : _i--) {
          this.particles.push(this.newParticles());
        }
      }
      this.particles = this.particles.filter(function(p) {
        return p.visible();
      });
      _ref2 = this.particles;
      _results = [];
      for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
        particle = _ref2[_j];
        particle.move();
        _results.push(particle.draw());
      }
      return _results;
    };

    Emitter.prototype.newParticles = function() {
      var position;
      position = new Vector(this.cw * Math.random(), this.ch * Math.random());
      return new Particle(position, this.mu);
    };

    Emitter.prototype.updateMu = function() {
      var particle, _i, _len, _ref1, _results;
      _ref1 = this.particles;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        particle = _ref1[_i];
        _results.push(particle.mu = this.mu);
      }
      return _results;
    };

    return Emitter;

  })();

  Tracker = (function() {

    Tracker.prototype.maxParticles = 500;

    Tracker.prototype.rate = 3;

    Tracker.prototype.ch = Figure.height;

    Tracker.prototype.cw = Figure.width;

    function Tracker(mu) {
      this.mu = mu != null ? mu : 1;
      this.particles = [];
    }

    Tracker.prototype.directParticles = function() {
      var particle, _i, _j, _len, _ref1, _ref2, _results,
        _this = this;
      if (!(this.particles.length > this.maxParticles)) {
        for (_i = 1, _ref1 = this.rate; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 1 <= _ref1 ? _i++ : _i--) {
          this.particles.push(this.newParticles());
        }
      }
      this.particles = this.particles.filter(function(p) {
        return p.visible();
      });
      _ref2 = this.particles;
      _results = [];
      for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
        particle = _ref2[_j];
        particle.move();
        _results.push(particle.draw());
      }
      return _results;
    };

    Tracker.prototype.newParticles = function() {
      var position;
      position = new Vector(this.cw * Math.random(), this.ch * Math.random());
      return new Particle(position, this.mu);
    };

    Tracker.prototype.updateMu = function() {
      var particle, _i, _len, _ref1, _results;
      _ref1 = this.particles;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        particle = _ref1[_i];
        _results.push(particle.mu = this.mu);
      }
      return _results;
    };

    return Tracker;

  })();

  Checkbox = (function() {

    function Checkbox(id, change) {
      var _this = this;
      this.id = id;
      this.change = change;
      this.checkbox = $("#" + id);
      this.checkbox.unbind();
      this.checkbox.on("change", function() {
        var val;
        val = _this.val();
        return _this.change(val);
      });
    }

    Checkbox.prototype.val = function() {
      return this.checkbox.is(":checked");
    };

    return Checkbox;

  })();

  d3Object = (function() {

    function d3Object(id) {
      this.element = d3.select("#" + id);
      this.element.selectAll("svg").remove();
      this.obj = this.element.append("svg");
      this.initAxes();
    }

    d3Object.prototype.append = function(obj) {
      return this.obj.append(obj);
    };

    d3Object.prototype.initAxes = function() {};

    return d3Object;

  })();

  Oscillator = (function(_super) {
    var height, margin, width;

    __extends(Oscillator, _super);

    margin = {
      top: 65,
      right: 65,
      bottom: 65,
      left: 65
    };

    width = Figure.width;

    height = Figure.height;

    function Oscillator(X) {
      var _this = this;
      Oscillator.__super__.constructor.call(this, X);
      this.obj.on("click", null);
      d3.behavior.drag().on("drag", null);
      this.obj.attr("width", width + margin.left + margin.right);
      this.obj.attr("height", height + margin.top + margin.bottom);
      this.obj.attr("id", "oscillator");
      this.obj.append("g").attr("class", "axis").attr("transform", "translate(" + margin.left + ", " + (margin.top + height + 10) + ")").call(this.xAxis);
      this.obj.append("g").attr("class", "axis").attr("transform", "translate(" + (margin.left - 10) + ", " + margin.top + ")").call(this.yAxis);
      this.plot = this.obj.append("g").attr("id", "plot").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      this.limitCircle = this.plot.append("circle").attr("cx", this.xscale(0) + margin.left * 0).attr("cy", this.yscale(0) + margin.top * 0).attr("r", this.xscale(2) - this.xscale(0)).style("fill", "transparent").style("stroke", "ccc");
      this.marker0 = this.plot.append("circle").attr("r", 5).style("fill", "black").style("stroke", "000").style("stroke-width", "1").call(d3.behavior.drag().origin(function() {
        return {
          x: _this.marker0.attr("cx"),
          y: _this.marker0.attr("cy")
        };
      }).on("drag", function() {
        return _this.dragMarker(_this.marker0, d3.event.x, d3.event.y);
      }));
      this.marker1 = this.plot.append("circle").attr("r", 10).style("fill", "red").style("stroke", "000").style("stroke-width", "1").call(d3.behavior.drag().origin(function() {
        return {
          x: _this.marker1.attr("cx"),
          y: _this.marker1.attr("cy")
        };
      }).on("drag", function() {
        return _this.dragMarker(_this.marker1, d3.event.x, d3.event.y);
      }));
    }

    Oscillator.prototype.dragMarker = function(marker, u, v) {
      marker.attr("cx", u);
      return marker.attr("cy", v);
    };

    Oscillator.prototype.moveMarker = function(marker, u, v) {
      marker.attr("cx", u + margin.left * 0);
      return marker.attr("cy", v + margin.top * 0);
    };

    Oscillator.prototype.initAxes = function() {
      this.xscale = d3.scale.linear().domain([-xMax, xMax]).range([0, width]);
      this.xAxis = d3.svg.axis().scale(this.xscale).orient("bottom");
      this.yscale = d3.scale.linear().domain([-yMax, yMax]).range([height, 0]);
      return this.yAxis = d3.svg.axis().scale(this.yscale).orient("left");
    };

    return Oscillator;

  })(d3Object);

  Scope = (function(_super) {
    var height, margin, width;

    __extends(Scope, _super);

    margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };

    width = Figure.width - margin.left - margin.right;

    height = Figure.height - margin.top - margin.bottom;

    function Scope(scope, initVal, color) {
      var _i, _ref1, _results,
        _this = this;
      this.N = 1001;
      this.hist = repRow(initVal, this.N);
      Scope.__super__.constructor.call(this, scope);
      this.obj.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
      this.screen = this.obj.append('g').attr("id", "screen").attr('transform', "translate(" + margin.left + ", " + margin.top + ")").attr('width', width).attr('height', height);
      this.obj.append("linearGradient").attr("id", "line-gradient").attr("gradientUnits", "userSpaceOnUse").attr("x1", width).attr("y1", 0).attr("x2", 0).attr("y2", 0).selectAll("stop").data([
        {
          offset: "0%",
          color: "white"
        }, {
          offset: "100%",
          color: color
        }
      ]).enter().append("stop").attr("offset", function(d) {
        return d.offset;
      }).attr("stop-color", function(d) {
        return d.color;
      });
      this.line = d3.svg.line().x(function(d) {
        return _this.x(d);
      }).y(function(d, i) {
        return _this.hist[i];
      }).interpolate("basis");
      this.screen.selectAll('path.trace').data([
        (function() {
          _results = [];
          for (var _i = 0, _ref1 = this.N; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this)
      ]).enter().append("path").attr("d", this.line).attr("class", "trace");
    }

    Scope.prototype.initAxes = function() {
      this.y = d3.scale.linear().domain([-4, 4]).range([0, height]);
      this.x = d3.scale.linear().domain([0, this.N - 1]).range([0, width]);
      this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickFormat(d3.format("d"));
      return this.yAxis = d3.svg.axis().scale(this.y).orient("left");
    };

    return Scope;

  })(d3Object);

  IntroSim = (function() {

    function IntroSim() {
      var _this = this;
      this.oscillator = new Oscillator("intro-oscillator");
      this.vectorField = new Emitter;
      this.markerPoint = new vfPoint;
      this.markerPoint.pos.x = this.markerPoint.x(3);
      this.markerPoint.pos.y = this.markerPoint.y(-3);
      this.scopeX = new Scope("x-scope", this.markerPoint.pos.x, "green");
      this.scopeY = new Scope("y-scope", this.markerPoint.pos.y, "blue");
      this.persist = new Checkbox("persist", function(v) {
        return _this.checked = v;
      });
      $("#mu-slider").on("change", function() {
        return _this.updateMu();
      });
      this.updateMu();
      d3.selectAll("#intro-stop-button").on("click", function() {
        return _this.stop();
      });
      d3.selectAll("#intro-start-button").on("click", function() {
        return _this.start();
      });
      setTimeout((function() {
        return _this.animate();
      }), 2000);
    }

    IntroSim.prototype.updateMu = function() {
      var k;
      k = parseFloat(d3.select("#mu-slider").property("value"));
      this.markerPoint.mu = k;
      this.vectorField.mu = k;
      this.vectorField.updateMu();
      return d3.select("#mu-value").html(k);
    };

    IntroSim.prototype.snapshot = function() {
      if (!this.checked) {
        Canvas.clear();
      }
      this.vectorField.directParticles();
      this.drawMarker();
      this.drawScope(this.scopeX, this.markerPoint.pos.x);
      return this.drawScope(this.scopeY, this.markerPoint.pos.y);
    };

    IntroSim.prototype.drawMarker = function() {
      this.markerPoint.move();
      return this.oscillator.moveMarker(this.oscillator.marker0, this.markerPoint.pos.x, this.markerPoint.pos.y);
    };

    IntroSim.prototype.drawScope = function(scope, val) {
      scope.hist.unshift(val);
      scope.hist = scope.hist.slice(0, scope.hist.length - 1);
      return scope.screen.selectAll('path.trace').attr("d", scope.line);
    };

    IntroSim.prototype.animate = function() {
      var _this = this;
      return this.timer = setInterval((function() {
        return _this.snapshot();
      }), 50);
    };

    IntroSim.prototype.stop = function() {
      clearInterval(this.timer);
      return this.timer = null;
    };

    IntroSim.prototype.start = function() {
      var _this = this;
      return setTimeout((function() {
        return _this.animate();
      }), 20);
    };

    return IntroSim;

  })();

  DistSim = (function() {

    function DistSim(u0, v0, u1, v1) {
      var _this = this;
      this.u0 = u0 != null ? u0 : 3;
      this.v0 = v0 != null ? v0 : -3;
      this.u1 = u1 != null ? u1 : 3;
      this.v1 = v1 != null ? v1 : 2;
      this.oscillator = new Oscillator("dist-oscillator");
      this.point0 = new vfPoint;
      this.initPointMarker(this.point0, this.u0, this.v0, this.oscillator.marker0);
      this.point1 = new vfPoint;
      this.initPointMarker(this.point1, this.u1, this.v1, this.oscillator.marker1);
      d3.selectAll("#dist-stop-button").on("click", function() {
        return _this.stop();
      });
      d3.selectAll("#dist-start-button").on("click", function() {
        return _this.start();
      });
      setTimeout((function() {
        return _this.start();
      }), 2000);
    }

    DistSim.prototype.initPointMarker = function(point, u, v, marker) {
      point.pos.x = point.x(u);
      point.pos.y = point.y(v);
      point.mu = 0.1;
      marker.attr("cx", point.pos.x);
      return marker.attr("cy", point.pos.y);
    };

    DistSim.prototype.snapshot = function() {
      return this.drawMarker();
    };

    DistSim.prototype.drawMarker = function() {
      this.point0.move();
      this.point1.move();
      this.oscillator.moveMarker(this.oscillator.marker0, this.point0.pos.x, this.point0.pos.y);
      return this.oscillator.moveMarker(this.oscillator.marker1, this.point1.pos.x, this.point1.pos.y);
    };

    DistSim.prototype.animate = function() {
      var _this = this;
      return this.timer = setInterval((function() {
        return _this.snapshot();
      }), 20);
    };

    DistSim.prototype.stop = function() {
      console.log("point", this.point0.pos.x);
      console.log("marker", this.oscillator.marker0.attr("cx"));
      clearInterval(this.timer);
      return this.timer = null;
    };

    DistSim.prototype.start = function() {
      var _this = this;
      this.point0.pos.x = this.oscillator.marker0.attr("cx");
      this.point0.pos.y = this.oscillator.marker0.attr("cy");
      this.point1.pos.x = this.oscillator.marker1.attr("cx");
      this.point1.pos.y = this.oscillator.marker1.attr("cy");
      return setTimeout((function() {
        return _this.animate();
      }), 20);
    };

    return DistSim;

  })();

  introSim = new IntroSim;

  distSim = new DistSim;

}).call(this);
